openapi: 3.0.3
info:
  title: UniversityToDoList - OpenAPI 3.0
  version: 1.0.2
servers:
  - url: https://universitytodolist.com
tags:
  - name: user
    description: Operations about user
  - name: group
    description: Operations about group
  
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: 'Create a new user'
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFullInfo'          
        '400':
          description: Invalid data supplied
        '401':
          description: User already exists
    put:
      tags:
        - user
      summary: Update user
      description: Update an existing user
      operationId: updateUser
      requestBody:
        description: Update User Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFullInfo'
      responses:
        '200':
          description: Successful operation
        '405':
          description: Validation exception
      security:
        - userPermissions:
          - write
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The user email
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The user password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFullInfo'
        '400':
          description: Invalid email/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Log out 
      description: Logs out current logged in user session
      operationId: logoutUser
      responses:
        '200':
          description: successful operation
      security:
        - userPermissions:
          - read
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by Id
      description: ''
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'The ID of user'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicInfo'          
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
      security:
        - userPermissions:
          - read
    delete:
      tags:
        - user
      summary: Delete user
      description: ''
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The ID of user which needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
      security:
        - userPermissions:
          - admin
  /user/tasks:
    get:
      tags:
        - user
      summary: Get tasks from all groups, where the user is a member
      description: Returns a multiple object of user_task ID
      operationId: getUserTasks
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTaskInfo'
      security:
        - userPermissions:
          - read
  /user/tasks/{taskId}:
    get:
      tags:
        - user
      summary: Update your status of assignment/task
      description: Update status 
      operationId: getAssignment
      parameters:
        - name: taskId
          in: path
          description: The task ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTaskInfo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Assignment/task not found
      security:
        - userPermissions:
          - read
    put:
      tags:
        - user
      summary: Update your status of assignment/task
      description: Update status 
      operationId: updateAssignment
      parameters:
        - name: taskId
          in: path
          description: The task ID
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: The status ID (done or undone)
          required: true
          schema:
            type: string
            example: done
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTaskInfo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Assignment/task not found
      security:
        - userPermissions:
          - read

  /groups:
    post:
      tags:
        - group
      summary: Create group
      description: Create a new group
      operationId: createGroup
      requestBody:
        description: A new group object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroup'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'          
        '405':
          description: Invalid input
      security:
        - userPermissions:
          - read
    get:
      tags:
        - group
      summary: Get user's groups
      description: Returns a multiple object of user_group ID
      operationId: getMyGroups
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupInfo'          
      security:
        - userPermissions:
          - read    
  /groups/{group_id}:
    get:
      tags:
        - group
      summary: Find group by ID
      description: Returns a single group
      operationId: getGroupById
      parameters:
        - name: group_id
          in: path
          description: ID of group to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Group not found
      security:
        - userPermissions:
          - read
    put:
      tags:
        - group
      summary: Update group
      description: Update info about group
      operationId: updateGroup
      parameters:
        - name: name
          in: query
          description: 'The new name of group'
          required: true
          schema:
            type: string
        - name: description
          in: query
          description: 'The new description of group'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'    
        '400':
          description: Invalid data supplied
      security:
        - groupPermissions:
          - update:group
        - userPermissions:
          - read
          - owner
    delete:
      tags:
        - group
      summary: Delete group
      description: Delete everything about group
      operationId: deleteGroup
      parameters:
        - name: group_id
          in: path
          description: ID of the group that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Group not found
      security:
        - groupPermissions:
          - delete:group
        - userPermissions:
          - write
          - owner
          - admin
  /groups/{group_id}/members:
    get:
      tags:
        - group
      summary: Get all members of group
      description: Returns a multiple object of members ID
      operationId: getMembersByGroup_id
      parameters:
        - name: group_id
          in: path
          description: ID of group to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberInfo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Group not found
      security:
        - userPermissions:
          - read
          - admin
    post:
      tags:
        - group
      summary: Add member to group
      description: Add a new member to group
      operationId: addMemberToGroup
      parameters:
        - name: group_id
          in: path
          description: ID of group to return
          required: true
          schema:
            type: integer
            format: int64
        - name: email
          in: query
          description: Email of the new member
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberInfo'
        '404':
          description: User not found
        '405':
          description: Invalid input
      security:
        - groupPermissions:
          - add:member
        - userPermissions:
          - write
          - owner
    delete:
      tags:
        - group
      summary: Delete member from group
      description: Delete the member from group
      operationId: deleteMemberFromGroup
      parameters:
        - name: group_id
          in: path
          description: ID of the group
          required: true
          schema:
            type: integer
            format: int64
        - name: member_id
          in: query
          description: ID of the member (!!!memberId, not UserId)
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '404':
          description: User not found
        '405':
          description: Invalid input
      security:
        - groupPermissions:
          - delete:member
        - userPermissions:
          - write
          - owner
  /groups/{group_id}/tasks:
    get:
      tags:
        - group
      summary: Get all tasks of group
      description: Returns a multiple object of tasks ID
      operationId: getTasksByGroup_id
      parameters:
        - name: group_id
          in: path
          description: ID of group to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/GroupTaskInfo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Group not found
      security:
        - userPermissions:
          - read
          - admin
    post:
      tags:
        - group
      summary: Add task to group
      description: Add a new task to group
      operationId: addTaskToGroup
      parameters:
        - name: group_id
          in: path
          description: ID of group to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Add a new task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTask'
        required: true
      responses:
        '200':
          description: successful operation
        '405':
          description: Invalid input
      security:
        - groupPermissions:
          - add:task
        - userPermissions:
          - write
          - owner
  /groups/{group_id}/tasks/{taskId}:
    get:
      tags:
        - group
      summary: read task from group
      description: read the task from group
      operationId: getTaskFromGroup
      parameters:
        - name: group_id
          in: path
          description: ID of the group where to read task
          required: true
          schema:
            type: integer
            format: int64
        - name: taskId
          in: path
          description: ID of the reading task
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupTaskInfo'
        '404':
          description: User not found
        '405':
          description: Invalid input
      security:
        - groupPermissions:
          - read:task
        - userPermissions:
          - read
    delete:
      tags:
        - group
      summary: Delete task from group
      description: Delete the task from group
      operationId: deleteTaskFromGroup
      parameters:
        - name: group_id
          in: path
          description: ID of the group where to delete task
          required: true
          schema:
            type: integer
            format: int64
        - name: taskId
          in: path
          description: ID of the deleting task
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
        '405':
          description: Invalid input
      security:
        - groupPermissions:
          - delete:task
        - userPermissions:
          - write
          - owner

components:
  schemas:
    CreateUser:
      type: object
      properties:
        name:
          type: string
          example: 'John'
        surname:
          type: string
          example: 'James'
        email:
          type: string
          example: 'john.james.2022@email.com'
        password:
          type: string
          example: 'qwerty2022'
    UserFullInfo:
      type: object
      properties:
        id:
          type: integer
          example: 35
        name:
          type: string
          example: 'John'
        surname:
          type: string
          example: 'James'
        email:
          type: string
          example: 'john.james.2022@email.com'
        password:
          type: string
          example: 'qwerty2022'
    UserPublicInfo:
      type: object
      properties:
        id:
          type: integer
          example: 35
        name:
          type: string
          example: 'John'
        surname:
          type: string
          example: 'James'
        email:  
          type: string
          example: 'john.james.2022@email.com'
    CreateGroup:
      type: object
      properties:
        name:
          type: string
          example: 'KN-215 Tasks'
        description:
          type: string
          example: 'This group is created to check KN-215 progress'
    GroupInfo:
      type: object
      properties:
        id:
          type: number
        owner_id: 
          type: integer
          format: int64
          example: 22
        name:
          type: string
          example: 'KN-215 Tasks'
        description:
          type: string
          example: 'This group is created to check KN-215 progress'
    MemberInfo:
      type: object
      properties:
        id:
          type: integer
          example: 35
        user_id:
          type: integer
          example: 35
        name:
          type: string
          example: 'John'
        surname:
          type: string
          example: 'James'
        email:
          type: string
          example: 'john.james.2022@email.com'
    CreateTask:
      type: object
      properties:
        name:
          type: string
          example: 'lab 3 PP'
        description:
          type: string
          example: 'deadline by 29.09.2022 (after it half a number of points)'
    GroupTaskInfo:
      type: object
      properties:
        id:
            type: integer
            example: 1
        group_id:
          type: integer
          format: int64
          example: 22
        name:
          type: string
          example: 'lab 3 PP'
        description:
          type: string
          example: 'deadline by 29.09.2022 (after it half a number of points)'
    UserTaskInfo:
      type: object
      properties:
        id:
            type: integer
            example: 1
        task_id:
          type: integer
          format: int64
          example: 22
        user_id:
          type: integer
          format: int64
          example: 22
        name:
          type: string
          example: 'lab 3 PP'
        status: 
          type: string
          example: done
        description:
          type: string
          example: 'deadline by 29.09.2022 (after it half a number of points)'
  
  securitySchemes:
    groupPermissions:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://universitytodolist.com/oauth/authorize/groupPermissions
          scopes:
            update:group: modify info about group
            delete:group: delete group
            add:member: add new member
            delete:member: delete member from group
            add:task: add task to group
            delete:task: delete task from
    userPermissions:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://universitytodolist.com/oauth/authorize/userPermissions
          scopes:
            read: access to read operations
            write: access to write operations
            owner: access to owner operations
            admin: access to admin operations